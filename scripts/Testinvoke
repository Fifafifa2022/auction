./peer chaincode deploy -l golang -n mycc -c '{"Function": "init", "Args":["INITIALIZE"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostUser", "Args":["100", "USER", "Ashley Hart", "PR",  "One Copley Parkway, #216, Morrisville, NC 27560", "9198063535", "admin@itpeople.com", "SUNTRUST", "00017102345", "0234678"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostUser", "Args":["200", "USER", "Sotheby", "AUCTION HOUSE",  "One Wembley Plaza, #216, London, UK ", "9198063535", "admin@sotheby.com", "Standard Chartered", "00017102345", "0234678"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostUser", "Args":["300", "USER", "Barry Smith", "COLLECTOR",  "155 Regency Parkway, #111, Cary, 27518 ", "9198063535", "barry@us.ibm.com", "RBC Centura", "00017102345", "0234678"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostUser", "Args":["400", "USER", "Meghan Kelly", "COLLECTOR",  "155 Sunset Blvd, Beverly Hills, CA, USA ", "9058063535", "barry@us.ibm.com", "RBC Centura", "00017102345", "0234678"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostUser", "Args":["500", "USER", "Tamara Haskins", "COLLECTOR",  "155 Sunset Blvd, Beverly Hills, CA, USA ", "9058063535", "barry@us.ibm.com", "RBC Centura", "00017102345", "0234678"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostItem", "Args":["1000", "ARTINV", "Shadows by Asppen", "Asppen Messer", "10102015", "Original", "Contemporary", "Canvas", "15 x 15 in", "sample_7.png","$600", "100"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostAuctionRequest", "Args":["1111", "AUCREQ", "1000", "200", "100", "04012016", "1200", "INIT", "2016-05-20 11:00:00.3 +0000 UTC","2016-05-23 11:00:00.3 +0000 UTC"]}'

./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostBid", "Args":["1111", "BID", "1", "1000", "300", "1200"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostBid", "Args":["1111", "BID", "2", "1000", "400", "3000"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostBid", "Args":["1111", "BID", "3", "1000", "400", "6000"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostBid", "Args":["1111", "BID", "4", "1000", "500", "7000"]}'
./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostBid", "Args":["1111", "BID", "5", "1000", "400", "8000"]}'


./peer chaincode invoke -l golang -n mycc -c '{"Function": "PostItem", "Args":["1000", "ARTINV", "Shadows by Asppen", "Asppen Messer", "10102015", "Original", "Contemporary", "Canvas", "15 x 15 in", "sample_7.png","$600", "100"]}'
	ItemID         string
	RecType        string
	ItemDesc       string
	ItemDetail     string // Could included details such as who created the Art work if item is a Painting
	ItemDate       string
	ItemType       string
	ItemSubject    string
	ItemMedia      string
	ItemSize       string
	ItemPicFN      string

	ItemImage      []byte // This has to be generated AES encrypted using the file name
	AES_Key        []byte // This is generated by the AES Algorithms
	ItemImageType  string // should be used to regenerate the appropriate image type

	ItemBasePrice  string // Reserve Price at Auction must be greater than this price
	CurrentOwnerID string // This is validated for a user registered record


./peer chaincode query -l golang -n mycc -c '{"Function": "GetAuctionRequest", "Args": ["1111"]}'

UI for opening Auction ?
./peer chaincode invoke -l golang -n mycc -c '{"Function": "OpenAuctionForBids", "Args":["1111", "OPENAUC", "1"]}'

./peer chaincode query -l golang -n mycc -c '{"Function": "GetHighestBid", "Args": ["1111"]}'

./peer chaincode query -l golang -n mycc -c '{"Function": "GetBid", "Args": ["1111","1"]}'

Need appropriate formatted values from Golayer
./peer chaincode query -l golang -n mycc -c '{"Function": "GetListOfBid", "Args": ["1111"]}'


GetUserIdList


Image ????
Error handling is stll not handled in Fabric REST API

